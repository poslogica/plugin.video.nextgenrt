name: Auto Version and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      #- '.github/**'
      - '.gitignore'

env:
  REPO_VERSION: 'v1.0.1'  # Single source of truth - available to all jobs

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      skip: ${{ steps.check_commit.outputs.skip }}
      new_version: ${{ steps.get_tag.outputs.NEW_VERSION }}
      release_created: ${{ steps.check_release.outputs.exists == 'false' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check if version bump commit
        id: check_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == "chore: bump version to"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping workflow - this is a version bump commit"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Proceeding with workflow"
          fi
      
      - name: Get latest tag
        if: steps.check_commit.outputs.skip == 'false'
        id: get_tag
        run: |
          # Get the latest tag, or use v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          
          # Extract version numbers
          VERSION=${LATEST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Previous version: $LATEST_TAG"
          echo "New version: $NEW_VERSION"
      
      - name: Update addon.xml version and news
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          VERSION="${{ steps.get_tag.outputs.NEW_VERSION }}"
          VERSION_NUMBER="${VERSION#v}"
          LATEST_TAG="${{ steps.get_tag.outputs.LATEST_TAG }}"
          CURRENT_DATE=$(date +%Y-%m-%d)
          REPO_VERSION_NUMBER="${REPO_VERSION#v}"
          
          # Get commit messages since last tag
          if [ "$LATEST_TAG" != "v0.0.0" ]; then
            COMMIT_MESSAGES=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s" | grep -v "^- chore: bump version" || echo "- Minor updates and improvements")
          else
            COMMIT_MESSAGES="- Initial release"
          fi
          
          # Create news entry
          NEWS_ENTRY="[B]NextGen RT News ChangeLog $VERSION - $CURRENT_DATE[/B]\n$COMMIT_MESSAGES"

          # Update RT repository version to static version
          sed -i "s/\(<addon id=\"repository.nextgenrt\"[^>]*version=\"\)[0-9]*\.[0-9]*\.[0-9]*\"/\1${REPO_VERSION_NUMBER}\"/" repository.nextgenrt/addon.xml

          # Update RT news plugin version to match
          sed -i "s/\(<addon id=\"plugin.video.nextgenrt\"[^>]*version=\"\)[0-9]*\.[0-9]*\.[0-9]*\"/\1$VERSION_NUMBER\"/" plugin.video.nextgenrt/addon.xml
          
          # Update TV series plugin version to match
          sed -i "s/\(<addon id=\"plugin.video.nextgenrttvseries\"[^>]*version=\"\)[0-9]*\.[0-9]*\.[0-9]*\"/\1$VERSION_NUMBER\"/" plugin.video.nextgenrttvseries/addon.xml
          
          # Update news section in addon.xml (replace content between <news> tags)
          # Using perl for better multi-line handling
          perl -i -0pe "s|<news>.*?</news>|<news>$NEWS_ENTRY\n\t\t</news>|s" plugin.video.nextgenrt/addon.xml
          
          # Show the changes
          echo "Updated repository.nextgenrt addon.xml version to ${REPO_VERSION_NUMBER}"
          echo "Updated plugin.video.nextgenrt addon.xml version to $VERSION_NUMBER"
          echo "Updated plugin.video.nextgenrttvseries version to $VERSION_NUMBER"
          echo "Updated news section with latest changes"
      
      - name: Commit version update
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add repository.nextgenrt/addon.xml plugin.video.nextgenrt/addon.xml plugin.video.nextgenrttvseries/addon.xml
          git commit -m "chore: bump version to ${{ steps.get_tag.outputs.NEW_VERSION }}" || echo "No changes to commit"
          git push || echo "No changes to push"
      
      - name: Check if release exists
        if: steps.check_commit.outputs.skip == 'false'
        id: check_release
        run: |
          if gh release view ${{ steps.get_tag.outputs.NEW_VERSION }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.get_tag.outputs.NEW_VERSION }} already exists, skipping"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.get_tag.outputs.NEW_VERSION }} does not exist, will create"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create plugin zips
        if: steps.check_release.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.get_tag.outputs.NEW_VERSION }}"
          zip -r repository.nextgenrt-${REPO_VERSION}.zip repository.nextgenrt
          zip -r plugin.video.nextgenrt-${VERSION}.zip plugin.video.nextgenrt
          zip -r plugin.video.nextgenrttvseries-${VERSION}.zip plugin.video.nextgenrttvseries
      
      - name: Create Release with Tag
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.NEW_VERSION }}
          name: NextGen RT News ${{ steps.get_tag.outputs.NEW_VERSION }}
          files: |
            plugin.video.nextgenrt-${{ steps.get_tag.outputs.NEW_VERSION }}.zip
            plugin.video.nextgenrttvseries-${{ steps.get_tag.outputs.NEW_VERSION }}.zip
            repository.nextgenrt-${{ env.REPO_VERSION }}.zip
          body: |
            ## NextGen RT News ${{ steps.get_tag.outputs.NEW_VERSION }}
            
            ### Installation
            1. Download the plugin zip file below
            2. In Kodi, go to Settings → Add-ons → Install from zip file
            3. Select the downloaded zip file
            4. The plugin will automatically install InputStream Adaptive if needed
            
            ### What's Changed
            See the [README](https://github.com/poslogica/plugin.video.nextgenrt/blob/main/README.md) for full details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  update-repository:
    runs-on: ubuntu-latest
    needs: auto-tag
    if: needs.auto-tag.outputs.skip == 'false'
    permissions:
      contents: write
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Wait for release assets
        run: |
          VERSION="${{ needs.auto-tag.outputs.new_version }}"

          echo "Waiting for release ${VERSION} assets to be available..."
          for i in {1..30}; do
            if wget --spider "https://github.com/poslogica/plugin.video.nextgenrt/releases/download/${VERSION}/plugin.video.nextgenrt-${VERSION}.zip" 2>&1 | grep -q '200 OK'; then
              echo "RT news video plugin asset is available!"
              break
            fi
            echo "Attempt $i: Asset not ready yet, waiting 10 seconds..."
            sleep 10
          done
          
          # Wait for TV series plugin asset
          for i in {1..30}; do
            if wget --spider "https://github.com/poslogica/plugin.video.nextgenrt/releases/download/${VERSION}/plugin.video.nextgenrttvseries-${VERSION}.zip" 2>&1 | grep -q '200 OK'; then
              echo "RT TV series video plugin asset is available!"
              break
            fi
            echo "Attempt $i: RT TV series asset not ready yet, waiting 10 seconds..."
            sleep 10
          done
          
          # Wait for repository asset
          for i in {1..30}; do
            if wget --spider "https://github.com/poslogica/plugin.video.nextgenrt/releases/download/${VERSION}/repository.nextgenrt-${REPO_VERSION}.zip" 2>&1 | grep -q '200 OK'; then
              echo "RT Repository plugin asset is available!"
              break
            fi
            echo "Attempt $i: RT Repository asset not ready yet, waiting 10 seconds..."
            sleep 10
          done

      - name: Download latest release zips
        run: |
          VERSION="${{ needs.auto-tag.outputs.new_version }}"
          VERSION_NUMBER="${VERSION#v}"
          REPO_VERSION_NUMBER="${REPO_VERSION#v}"
          mkdir -p plugin-downloads
          
          # Download RT news video plugin
          wget "https://github.com/poslogica/plugin.video.nextgenrt/releases/download/${VERSION}/plugin.video.nextgenrt-${VERSION}.zip" \
            -O plugin-downloads/plugin.video.nextgenrt-${VERSION_NUMBER}.zip
          echo "Downloaded RT news video plugin version ${VERSION}"
          
          # Download TV series video plugin
          wget "https://github.com/poslogica/plugin.video.nextgenrt/releases/download/${VERSION}/plugin.video.nextgenrttvseries-${VERSION}.zip" \
            -O plugin-downloads/plugin.video.nextgenrttvseries-${VERSION_NUMBER}.zip
          echo "Downloaded TV series video plugin version ${VERSION}"

          # Download RT repository plugin
          wget "https://github.com/poslogica/plugin.video.nextgenrt/releases/download/${VERSION}/repository.nextgenrt-${REPO_VERSION}.zip" \
            -O plugin-downloads/repository.nextgenrt-${REPO_VERSION_NUMBER}.zip
          echo "Downloaded RT repository plugin version ${REPO_VERSION}"

      - name: Setup Python (for Internet Archive CLI)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Internet Archive CLI
        run: pip install --upgrade internetarchive

      - name: Upload plugin zips and assets to Internet Archive
        env:
          IA_ACCESS_KEY: ${{ secrets.IA_ACCESS_KEY }}
          IA_SECRET_KEY: ${{ secrets.IA_SECRET_KEY }}
        run: |
          if [ -n "${IA_ACCESS_KEY:-}" ] && [ -n "${IA_SECRET_KEY:-}" ]; then
            # Configure Internet Archive CLI with the provided credentials
            mkdir -p "$HOME/.config"
            SCREENNAME=${GITHUB_REPOSITORY_OWNER:-poslogica}
            CONFIG_FILE="$HOME/.config/ia.ini"
            {
              echo "[general]";
              echo "screenname = ${SCREENNAME}";
              echo;
              echo "[s3]";
              echo "access = ${IA_ACCESS_KEY}";
              echo "secret = ${IA_SECRET_KEY}";
            } > "$CONFIG_FILE"
            chmod 600 "$CONFIG_FILE"

            IDENTIFIER="nextgenrtkodirepository"
            
            # Upload plugin zips from downloads to addon-specific subdirectories
            if [ -f "plugin-downloads/plugin.video.nextgenrt-"*.zip ]; then
              echo "Uploading main plugin zip to Internet Archive (plugin.video.nextgenrt subdirectory)"
              ia -c "$CONFIG_FILE" upload "$IDENTIFIER" plugin-downloads/plugin.video.nextgenrt-*.zip \
                --remote-name "plugin.video.nextgenrt/$(basename plugin-downloads/plugin.video.nextgenrt-*.zip)" \
                --metadata="title:NextGen RT Kodi Repository" \
                --metadata="mediatype:software" \
                --metadata="collection:open_source_software" \
                --metadata="creator:${{ github.repository_owner }}" \
                --metadata="subject:Kodi;Addon;Repository" \
                --no-derive \
                --retries 5
            fi
            
            if [ -f "plugin-downloads/plugin.video.nextgenrttvseries-"*.zip ]; then
              echo "Uploading TV series plugin zip to Internet Archive (plugin.video.nextgenrttvseries subdirectory)"
              ia -c "$CONFIG_FILE" upload "$IDENTIFIER" plugin-downloads/plugin.video.nextgenrttvseries-*.zip \
                --remote-name "plugin.video.nextgenrttvseries/$(basename plugin-downloads/plugin.video.nextgenrttvseries-*.zip)" \
                --metadata="title:NextGen RT Kodi Repository" \
                --metadata="mediatype:software" \
                --metadata="collection:open_source_software" \
                --metadata="creator:${{ github.repository_owner }}" \
                --metadata="subject:Kodi;Addon;Repository" \
                --no-derive \
                --retries 5
            fi
            
            # Delete old repository zip to clear cache
            echo "Deleting old repository zip from Internet Archive to clear cache"
            REPO_VERSION_NUMBER="${REPO_VERSION#v}"
            ia -c "$CONFIG_FILE" delete "$IDENTIFIER" "repository.nextgenrt/repository.nextgenrt-${REPO_VERSION_NUMBER}.zip" || echo "File not found or deletion failed, continuing..."
            
            # Upload repository zip
            if [ -f "plugin-downloads/repository.nextgenrt-"*.zip ]; then
              echo "Uploading repository zip to Internet Archive (repository.nextgenrt subdirectory)"
              ia -c "$CONFIG_FILE" upload "$IDENTIFIER" plugin-downloads/repository.nextgenrt-*.zip \
                --remote-name "repository.nextgenrt/$(basename plugin-downloads/repository.nextgenrt-*.zip)" \
                --metadata="title:NextGen RT Kodi Repository" \
                --metadata="mediatype:software" \
                --metadata="collection:open_source_software" \
                --metadata="creator:${{ github.repository_owner }}" \
                --metadata="subject:Kodi;Addon;Repository" \
                --no-derive \
                --retries 5
            fi
          else
            echo "Skipping Internet Archive upload (credentials missing)."
          fi
      
      - name: Update addons.xml and generate checksum
        run: |
          # Create root addons.xml from all the addon.xml files
          cat > addons.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <addons>
          EOF
          
          # Add main plugin addon
          sed -n '/<addon/,/<\/addon>/p' plugin.video.nextgenrt/addon.xml | sed 's/^/\t/' >> addons.xml
          echo "" >> addons.xml
          
          # Add TV series plugin addon
          sed -n '/<addon/,/<\/addon>/p' plugin.video.nextgenrttvseries/addon.xml | sed 's/^/\t/' >> addons.xml
          echo "" >> addons.xml
          
          echo "</addons>" >> addons.xml
          
          # Generate MD5 (hash only, no filename)
          md5sum addons.xml | awk '{print $1}' > addons.xml.md5
          
          echo "Updated addons.xml with both plugins and checksum"

      - name: Commit root addons.xml and addons.xml.md5 to main
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # The addons.xml and addons.xml.md5 were generated in the current directory
          # Add both to the root of the repository
          git add addons.xml addons.xml.md5
          git commit -m "chore: update root addons.xml and checksum with current plugin versions" || echo "No changes to commit"
          git push origin main || echo "Push failed or no changes"

      - name: Upload addons.xml and md5 to Internet Archive
        env:
          IA_ACCESS_KEY: ${{ secrets.IA_ACCESS_KEY }}
          IA_SECRET_KEY: ${{ secrets.IA_SECRET_KEY }}
        run: |
          # Upload repository index files to Internet Archive so a mirror stays updated
          if [ -f addons.xml ] && [ -f addons.xml.md5 ] && [ -n "${IA_ACCESS_KEY:-}" ] && [ -n "${IA_SECRET_KEY:-}" ]; then
            mkdir -p "$HOME/.config"
            SCREENNAME=${GITHUB_REPOSITORY_OWNER:-poslogica}
            CONFIG_FILE="$HOME/.config/ia.ini"
            {
              echo "[general]";
              echo "screenname = ${SCREENNAME}";
              echo;
              echo "[s3]";
              echo "access = ${IA_ACCESS_KEY}";
              echo "secret = ${IA_SECRET_KEY}";
            } > "$CONFIG_FILE"
            chmod 600 "$CONFIG_FILE"

            IDENTIFIER="nextgenrtkodirepository"
            echo "Uploading addons.xml and addons.xml.md5 to Internet Archive item: $IDENTIFIER"
            ia -c "$CONFIG_FILE" upload "$IDENTIFIER" addons.xml addons.xml.md5 \
              --metadata="title:NextGen RT Kodi Repository" \
              --metadata="mediatype:software" \
              --metadata="collection:open_source_software" \
              --metadata="creator:${{ github.repository_owner }}" \
              --metadata="subject:Kodi;Addon;Repository" \
              --no-derive \
              --retries 5
          else
            echo "Skipping IA upload for addons.xml (files or credentials missing)."
          fi
